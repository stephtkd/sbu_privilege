name: PHP CS Fixer & Build & Release draft
on: [push, pull_request, workflow_dispatch]

jobs:
    # Check there is no syntax errors in the project
  php-linter:
    name: PHP Syntax check 7.2|7.3|7.4
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0
      - name: PHP syntax checker 7.2
        uses: prestashop/github-action-php-lint/7.2@master
      - name: PHP syntax checker 7.3
        uses: prestashop/github-action-php-lint/7.3@master
      - name: PHP syntax checker 7.4
        uses: prestashop/github-action-php-lint/7.4@master
 # Check the PHP code follow the coding standards
  php-cs-fixer:
    name: PHP-CS-Fixer
    runs-on: ubuntu-latest
    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
      - name: Checkout
        uses: actions/checkout@v2.0.0
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: vendor
          key: php-${{ hashFiles('composer.lock') }}
      - name: Install dependencies
        run: composer install
      - name: Run PHP-CS-Fixer
        run: pwd && ls -l && && cat .php-cs-fixer.dist.php && ./vendor/bin/php-cs-fixer fix --dry-run --diff --using-cache=no --diff-format udiff -vvv
  deploy:
    name: build dependencies & create artifact
    runs-on: ubuntu-latest
    needs: [php-linter, php-cs-fixer]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0
      - name: Install composer dependencies
        run: composer install --no-dev -o
      - name: Clean-up project
        uses: PrestaShopCorp/github-action-clean-before-deploy@v1.0
      - name: Create & upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.event.repository.name }}
          path: ../
  update_release_draft:
    runs-on: ubuntu-latest
    needs: [deploy]
   # if: github.event_name == 'push'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ github.event.repository.name }}
      - id: release_info
        uses: toolmantim/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare for Release
        run: |
          cd ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}
      - name: Clean existing assets
        shell: bash
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          assets=`bin/hub api -t repos/${{ github.repository }}/releases/${{ steps.release_info.outputs.id }}/assets | awk '/\].url/ { print $2 }'`
          for asset in $assets
          do
            bin/hub api -X DELETE $asset
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to GitHub Release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}/${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}.zip
          asset_content_type: application/zip
